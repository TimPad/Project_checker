import streamlit as st
from openai import OpenAI
import json
from pptx import Presentation
import io
import pandas as pd

# --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
st.set_page_config(
    page_title="–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è–º",
    page_icon="ü§ñ",
    layout="wide"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º st.cache_resource –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
@st.cache_resource
def get_openai_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è DeepSeek."""
    try:
        client = OpenAI(
            api_key=st.secrets["DEEPSEEK_API_KEY"],
            base_url="https://api.studio.nebius.ai/v1/"
        )
        return client
    except KeyError:
        st.error("–ö–ª—é—á DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ.")
        return None
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ API: {e}")
        return None

client = get_openai_client()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def extract_text_from_pptx(uploaded_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .pptx."""
    try:
        pptx_buffer = io.BytesIO(uploaded_file.getvalue())
        prs = Presentation(pptx_buffer)
        text_runs = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if not shape.has_text_frame:
                    continue
                for paragraph in shape.text_frame.paragraphs:
                    for run in paragraph.runs:
                        text_runs.append(run.text)
        return "\n".join(text_runs)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        return ""

def get_analysis_from_deepseek(project_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ DeepSeek API –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
    if not client:
        return None

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è AI >>>
    # –ü—Ä–æ–º—Ç –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    prompt = f"""
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —É—á–µ–±–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. –¢–≤–æ—è —Ä–æ–ª—å ‚Äî –±—ã—Ç—å —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º. –¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏/–∏–ª–∏ –¥–æ–∫–ª–∞–¥–∞) –∏ –¥–∞–µ—à—å –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –µ–¥–∏–Ω–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏:

1.  "strengths": –°–ø–∏—Å–æ–∫ (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫) —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –ø—Ä–æ–µ–∫—Ç–∞. –û—Ü–µ–Ω–∏–≤–∞–π –ª–æ–≥–∏–∫—É, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –≥–ª—É–±–∏–Ω—É –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ–≤–∏–∑–Ω—É –∏–¥–µ–∏, –∫–∞—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
2.  "weaknesses": –°–ø–∏—Å–æ–∫ (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫) —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –∑–æ–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –£–∫–∞–∂–∏ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ—Å—Ç—ã–∫–æ–≤–∫–∏, —Å–ª–∞–±—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –ø–ª–æ—Ö—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.
3.  "fact_check": –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤. –ù–∞–π–¥–∏ –≤ —Ç–µ–∫—Å—Ç–µ 3-5 –∫–ª—é—á–µ–≤—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏ "claim", "verdict" ('–ò—Å—Ç–∏–Ω–∞', '–õ–æ–∂—å' –∏–ª–∏ '–ù–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º–æ/–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è') –∏ "explanation".
4.  "storytelling_script": –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É—Å—Ç–Ω–æ–≥–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è (5-7 –º–∏–Ω) –≤ —Å—Ç–∏–ª–µ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–∞, —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏:
    *   "introduction": –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (1 –º–∏–Ω—É—Ç–∞). –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π "–∫—Ä—é—á–æ–∫", –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∏ –µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.
    *   "main_part": –¢–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ (3-5 –º–∏–Ω—É—Ç). –õ–æ–≥–∏—á–Ω–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Å—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ–±–ª–µ–º–∞, —Ä–µ—à–µ–Ω–∏–µ, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    *   "conclusion": –¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è (1 –º–∏–Ω—É—Ç–∞). –ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã, –≥–ª–∞–≤–Ω—ã–π –≤–∫–ª–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.
5.  "tricky_questions": –°–ø–∏—Å–æ–∫ (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫) –∏–∑ 5 –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö, –Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –∑–∞–¥–∞—Ç—å –Ω–∞ –∑–∞—â–∏—Ç–µ. –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≥–ª—É–±–∏–Ω—É –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–º—ã, –∑–Ω–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —É–º–µ–Ω–∏–µ –º—ã—Å–ª–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏.

–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ.

–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{project_text}
"""

    try:
        response = client.chat.completions.create(
            model="deepseek-ai/DeepSeek-R1",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6, # –ù–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—Å–∏–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
            response_format={"type": "json_object"}
        )
        content = response.choices[0].message.content
        return json.loads(content)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API DeepSeek: {e}")
        return None

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---
st.title("ü§ñ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —à–∫–æ–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é (`.pptx`) –∏/–∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–∫–ª–∞–¥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

# –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
col1, col2 = st.columns(2)

with col1:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", type=["pptx"])

with col2:
    report_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–∫–ª–∞–¥–∞", height=250, placeholder="–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫–ª–∞–¥–∞...")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
if st.button("üöÄ –ü—Ä–æ–≤–µ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –ø—Ä–æ–µ–∫—Ç–∞", type="primary", use_container_width=True):
    presentation_text = ""
    if uploaded_file is not None:
        with st.spinner("–ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏..."):
            presentation_text = extract_text_from_pptx(uploaded_file)
    
    combined_text = (presentation_text + "\n\n" + report_text).strip()

    if not combined_text:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    else:
        with st.spinner("–ò–ò-—ç–∫—Å–ø–µ—Ä—Ç –∏–∑—É—á–∞–µ—Ç –≤–∞—à –ø—Ä–æ–µ–∫—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç."):
            analysis_result = get_analysis_from_deepseek(combined_text)

        if analysis_result:
            st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            
            st.header("üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")

            # –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
            col_strengths, col_weaknesses = st.columns(2)
            with col_strengths:
                st.subheader("üëç –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
                strengths = analysis_result.get("strengths", [])
                if strengths:
                    for item in strengths:
                        st.markdown(f"- {item}")
                else:
                    st.info("–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.")
            
            with col_weaknesses:
                st.subheader("ü§î –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞")
                weaknesses = analysis_result.get("weaknesses", [])
                if weaknesses:
                    for item in weaknesses:
                        st.markdown(f"- {item}")
                else:
                    st.info("–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.")


            st.divider()

            # –§–∞–∫—Ç-—á–µ–∫–∏–Ω–≥
            st.header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤")
            fact_check_data = analysis_result.get("fact_check", [])
            if fact_check_data:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                df = pd.DataFrame(fact_check_data)
                df.columns = ["–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í–µ—Ä–¥–∏–∫—Ç", "–ü–æ—è—Å–Ω–µ–Ω–∏–µ"]
                st.dataframe(df, use_container_width=True, hide_index=True)
            else:
                st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–∫—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.")

            st.divider()

            # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ü–µ–Ω–∞—Ä–∏—è >>>
            # –¢–µ–ø–µ—Ä—å –º—ã –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ —á–∞—Å—Ç–∏ –ø–æ–¥ —Å–≤–æ–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
            st.header("üé§ –ò–¥–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è (5-7 –º–∏–Ω—É—Ç)")
            script = analysis_result.get("storytelling_script")
            
            if isinstance(script, dict):
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", expanded=True):
                    st.subheader("–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ (‚âà1 –º–∏–Ω—É—Ç–∞)")
                    st.markdown(script.get("introduction", "_–¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω._"))
                    
                    st.subheader("–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (‚âà3-5 –º–∏–Ω—É—Ç)")
                    st.markdown(script.get("main_part", "_–¢–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω._"))

                    st.subheader("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ (‚âà1 –º–∏–Ω—É—Ç–∞)")
                    st.markdown(script.get("conclusion", "_–¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω._"))
            else:
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ API –≤–µ—Ä–Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫—É
                st.markdown(script or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π.")

            st.divider()

            # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –í—ã–≤–æ–¥ –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ >>>
            # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
            st.header("ü§î –¢–æ–ø-5 –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã")
            questions = analysis_result.get("tricky_questions", [])
            if questions:
                for i, question in enumerate(questions):
                    st.markdown(f"**{i+1}.** {question}")
            else:
                st.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–≤–µ—Ä–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")
                
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
