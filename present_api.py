import streamlit as st
from openai import OpenAI
import json
from pptx import Presentation
import io
import fitz
import base64
import asyncio
from concurrent.futures import ThreadPoolExecutor
import time

# --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
st.set_page_config(
    page_title="–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∑–∞—â–∏—Ç–µ",
    page_icon="ü§ñ",
    layout="wide"
)

EXAMPLE_STORYTELLING_TEXT = """–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏, —ç–∫—Å–ø–µ—Ä—Ç—ã, –ø–∞—Ä—Ç–Ω—ë—Ä—ã.
–°–µ–≥–æ–¥–Ω—è –º—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –±—É–¥—É—â–µ–≥–æ, —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –Ω–æ–≤–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–∏—Ä–æ–≤—ã–º –æ–∫–µ–∞–Ω–æ–º.
–ü—Ä–æ–µ–∫—Ç ¬´–°–ø—Ä—É—Ç¬ª ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø. –≠—Ç–æ —à–∞–≥ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ü–∏–≤–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π, —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–π –∏ –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ–π –¥–æ–±—ã—á–∏ –¥–æ–Ω–Ω—ã—Ö –ø–æ–ª–∏–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ü–∏–π.
–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?
–ü–æ–ª–∏–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ü–∏–∏ ‚Äî —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –æ–∫–µ–∞–Ω—Å–∫–æ–≥–æ –¥–Ω–∞.
–û–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã: –º–∞—Ä–≥–∞–Ω–µ—Ü, –Ω–∏–∫–µ–ª—å, –∫–æ–±–∞–ª—å—Ç, –º–µ–¥—å ‚Äî –∏–º–µ–Ω–Ω–æ —Ç–µ, —á—Ç–æ –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ ¬´–∑–µ–ª—ë–Ω–æ–π¬ª —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏, –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤, –º–∏–∫—Ä–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ —ç–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.
–ù–∞ –¥–Ω–µ –æ–∫–µ–∞–Ω–æ–≤ —ç—Ç–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ 3‚Äì4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ, —á–µ–º –Ω–∞ –≤—Å–µ–π —Å—É—à–µ.
–û–±—â–∏–µ –∑–∞–ø–∞—Å—ã ‚Äî –±–æ–ª–µ–µ 500 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ —Ç–æ–Ω–Ω, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–æ–≤–∏–Ω–∞ ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ –º–∏–Ω–µ—Ä–∞–ª—ã.
–≠—Ç–æ –∫–æ–ª–æ—Å—Å–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å—ã—Ä—å—ë–º –Ω–∞ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è –≤–ø–µ—Ä—ë–¥.
–ù–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞.
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ–±—ã—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏ –Ω–∞–Ω–æ—Å—è—Ç –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞–º.
–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Ç—è–∂—ë–ª—ã—Ö –¥—Ä–∞–≥ –≥–∏–±–Ω–µ—Ç –±–æ–ª–µ–µ 51% –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤. –†–∞–∑—Ä—É—à–∞—é—Ç—Å—è –±–∏–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –Ω–∞—Ä—É—à–∞–µ—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º.
–ü—Ä–∏ —ç—Ç–æ–º —Å–ø—Ä–æ—Å –Ω–∞ –æ–∫–µ–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Ç—ë—Ç ‚Äî –æ–Ω –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è.
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–∞ –¥–æ–±—ã—á—É –≤ –†–æ—Å—Å–∏–∏ —Å 2020 –ø–æ 2024 –≥–æ–¥ –≤—ã—Ä–æ—Å–ª–æ –Ω–∞ 200%.
–ê –º–∏—Ä–æ–≤–æ–π —Ä—ã–Ω–æ–∫ –ø–æ–¥–≤–æ–¥–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—Å—Ç –Ω–∞ 43% –≤ –≥–æ–¥.
–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏
–ù–∞—à–∞ –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Ä–∞–∑—Ä—É—à–∞–µ—Ç ‚Äî –∞ –±–µ—Ä–µ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –ø—Ä–∏—Ä–æ–¥–æ–π.
–ò–∑—É—á–∏–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –ø–∞—Ç–µ–Ω—Ç—ã –∏ —Å–æ–±—Ä–∞–≤ –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–¥–≤–æ–¥–Ω–æ–π –¥–æ–±—ã—á–µ.
–¢–∞–∫ —Ä–æ–¥–∏–ª—Å—è ¬´–°–ø—Ä—É—Ç¬ª.
–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–°–ø—Ä—É—Ç¬ª?
–≠—Ç–æ –º–æ–±–∏–ª—å–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –±–∏–æ–º–∏–º–µ—Ç–∏—á–µ—Å–∫–∏–º –º–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä–æ–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –ø—Ä–∏—Ä–æ–¥–æ–π ‚Äî —â—É–ø–∞–ª—å—Ü–∞–º–∏ –æ—Å—å–º–∏–Ω–æ–≥–∞ –∏ —Ö–æ–±–æ—Ç–æ–º —Å–ª–æ–Ω–∞.
–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä –ø–æ—Å—Ç—Ä–æ–µ–Ω –ø–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —Å–ø–∏—Ä–∞–ª–∏ ‚Äî –æ–Ω —Å–ø–æ—Å–æ–±–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ –¥–∏–∞–º–µ—Ç—Ä–∞.
–ü–æ–¥–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ 260 —Ä–∞–∑ —Ç—è–∂–µ–ª–µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞.
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî –∫–∞–∫ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º.
–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ü–∏–∏ –ø—Ä—è–º–æ –Ω–∞ –¥–Ω–µ.
–ß—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ
–ú—ã –ø—Ä–æ—à–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —ç—Ç–∞–ø—ã:
–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ç–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
–°–æ–∑–¥–∞–Ω–∏–µ 3D-–º–æ–¥–µ–ª–µ–π, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
–°–±–æ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
–ü–µ—Ä–≤–∏—á–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å ‚Äî –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –º–∞–∫–µ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä–∞, —Ä–∞–±–æ—á–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ.
–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è?
–°—Ä–∞–≤–Ω–∏–≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏, –º—ã –ø–æ–ª—É—á–∏–ª–∏:
–°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–Ω–Ω–æ–≥–æ –≥—Ä—É–Ω—Ç–∞ –Ω–∞ 72%
–ü–æ–¥—ä—ë–º –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ü–∏–∏ ‚Äî –∑–∞ 10 —Å–µ–∫—É–Ω–¥
–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ‚Äî –¥–æ 15 –∫–º/—á
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –¥–æ 1,8 —á–∞—Å–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π –∑–∞—Ä—è–¥–∫–µ
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è–º –¥–Ω–∞ ‚Äî –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Ç—Ä–∏ –µ—ë –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
–ö–æ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ?
–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É ‚Äî —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç–∞ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–ø–æ—Ä—Ç–∞
–ë–∏–∑–Ω–µ—Å—É ‚Äî —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–π –∏–º–∏–¥–∂, —Å–Ω–∏–∂–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤, —ç–∫—Å–ø–æ—Ä—Ç–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
–£—á—ë–Ω—ã–º ‚Äî —ç—Ç–∏—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≤–æ–¥–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
–ü—Ä–∏—Ä–æ–¥–µ ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –Ω–µ –Ω–∞—Ä—É—à–∞–µ–º –µ—ë, –∞ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –Ω–µ–π
–ö—Ç–æ –º—ã?
–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –∏–∑ 9 –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –∏ —Å—Ö–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏.
–ù–∞—Å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç—Ä–∞—Å—Ç—å –∫ –ø–æ–¥–≤–æ–¥–Ω–æ–π —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤ –æ—Ç—Ä–∞—Å–ª–∏.
–ß—Ç–æ –¥–∞–ª—å—à–µ?
–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ—Ä—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.
–ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ–¥–µ
–î–æ–æ—Å–Ω–∞—Å—Ç–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å–∏—Å—Ç–µ–º–æ–π —Å–≤—è–∑–∏ –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
–ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∏–ª–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
–§–∏–Ω–∞–ª
¬´–°–ø—Ä—É—Ç¬ª ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–∞—à–∏–Ω–∞. –≠—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è.
–§–∏–ª–æ—Å–æ—Ñ–∏—è –±–µ—Ä–µ–∂–Ω–æ–≥–æ, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏ —É–º–Ω–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è –æ–∫–µ–∞–Ω–∞.
–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—é–∑–Ω–∏–∫–∞–º–∏ –ø—Ä–∏—Ä–æ–¥—ã ‚Äî –∞ –Ω–µ –µ—ë –≤—Ä–∞–≥–∞–º–∏.
–ò –µ—Å–ª–∏ –æ–∫–µ–∞–Ω ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–µ–ª–∏–∫–æ–µ –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ –ó–µ–º–ª–µ,
–º—ã –≥–æ—Ç–æ–≤—ã –∏–¥—Ç–∏ —Ç—É–¥–∞. –ù–æ –∏–¥—Ç–∏ –∏–Ω–∞—á–µ. –° —É–º–æ–º, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º ‚Äî –∏ —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏.
–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.
"""

@st.cache_resource
def get_openai_client():
    try:
        client = OpenAI(
            api_key=st.secrets["DEEPSEEK_API_KEY"],
            base_url="https://api.studio.nebius.ai/v1/"
        )
        return client
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ API: {e}")
        return None

client = get_openai_client()

# --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ---
def extract_text_from_pptx(uploaded_file):
    try:
        pptx_buffer = io.BytesIO(uploaded_file.getvalue())
        prs = Presentation(pptx_buffer)
        text_runs = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if not shape.has_text_frame:
                    continue
                for paragraph in shape.text_frame.paragraphs:
                    for run in paragraph.runs:
                        text_runs.append(run.text)
        return "\n".join(text_runs)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        return ""

def extract_images_from_pptx(uploaded_file):
    images = []
    try:
        pptx_buffer = io.BytesIO(uploaded_file.getvalue())
        prs = Presentation(pptx_buffer)
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, 'shape_type') and shape.shape_type == 13:  # Picture type
                    if hasattr(shape, 'image'):
                        img = shape.image
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        if len(img.blob) < 500000:  # –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—å—à–µ 500KB
                            images.append(img.blob)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
    return images[:3]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

def extract_images_from_pdf(uploaded_file):
    images = []
    try:
        pdf_bytes = uploaded_file.getvalue()
        with fitz.open(stream=pdf_bytes, filetype="pdf") as doc:
            for page_num, page in enumerate(doc):
                if page_num > 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
                    break
                for img_ref in page.get_images(full=True):
                    xref = img_ref[0]
                    base_image = doc.extract_image(xref)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if len(base_image["image"]) < 500000:
                        images.append(base_image["image"])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF: {e}")
    return images[:3]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

def recognize_images(images: list) -> str:
    descriptions = []
    if not client or not images:
        return ""
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    def process_single_image(img_data, idx):
        try:
            b64 = base64.b64encode(img_data).decode('utf-8')
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä base64 —Å—Ç—Ä–æ–∫–∏
            if len(b64) > 15000:
                b64 = b64[:15000]
                note = " (—É—Å–µ—á–µ–Ω–æ)"
            else:
                note = ""
            
            prompt = f"–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ #{idx}{note}."
            
            response = client.chat.completions.create(
                model="google/gemma-3-27b-it",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                max_tokens=150,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                temperature=0.3,
                messages=[{"role": "user", "content": prompt}]
            )
            return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{idx}: {response.choices[0].message.content.strip()}"
        except Exception as e:
            return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{idx}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    with ThreadPoolExecutor(max_workers=2) as executor:  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 2 –ø–æ—Ç–æ–∫–æ–≤
        futures = [executor.submit(process_single_image, img_bytes, idx) 
                  for idx, img_bytes in enumerate(images[:3], start=1)]
        descriptions = [future.result() for future in futures]
    
    return "\n".join(descriptions)

def extract_text_from_pdf(uploaded_file):
    try:
        pdf_bytes = uploaded_file.getvalue()
        with fitz.open(stream=pdf_bytes, filetype="pdf") as doc:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            pages_to_process = min(10, len(doc))  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
            return "\n".join([doc[i].get_text() for i in range(pages_to_process)])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞: {e}")
        return ""

def get_analysis_from_deepseek(project_text: str, tone: str):
    if not client:
        return None

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if len(project_text) > 10000:
        project_text = project_text[:10000] + "\n... (—Ç–µ–∫—Å—Ç —É—Å–µ—á–µ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)"

    storytelling_instruction = f"""
–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ {tone.lower()} TED —Å —á—ë—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏:
1. "introduction": –º–æ—â–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ ‚Äî –æ–±–æ–∑–Ω–∞—á—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
2. "main_part": —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å ‚Äî –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å, —Ö–æ–¥ —Ä–∞–±–æ—Ç—ã –∏ –∫–ª—é—á–µ–≤—É—é –Ω–æ–≤–∏–∑–Ω—É –ø—Ä–æ–µ–∫—Ç–∞
3. "conclusion": —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –ø–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

(–°—Ç–∏–ª—å: –∂–∏–≤–æ–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –±–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π)
"""

    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –≤–µ—Ä–Ω–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å:
1. "strengths": 3-5 —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
2. "weaknesses": 3-5 —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
3. "fact_check": 3-4 –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –±—É–¥—å –ø—Ä–∏–¥–∏—Ä—á–∏–≤ –∏ –≤—ä–µ–¥–ª–∏–≤ (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ claim, verdict, explanation)
4. "storytelling_script": —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è ({tone}) - –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ introduction, main_part, conclusion
5. "tricky_questions": 4-5 –æ—á–µ–Ω—å –∫–∞–≤–µ—Ä–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–∞–∫ –ø—Ä–∏ –∑–∞—â–∏—Ç–µ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏ (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)

–ü—Ä–æ–µ–∫—Ç:
{project_text}
"""

    try:
        response = client.chat.completions.create(
            model="deepseek-ai/DeepSeek-R1",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            messages=[{"role": "user", "content": prompt}],
            temperature=0.5,
            top_p=0.8,
            max_tokens=2000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            response_format={"type": "json_object"}
        )
        return json.loads(response.choices[0].message.content)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}")
        return None

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.title("ü§ñ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∑–∞—â–∏—Ç–µ")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é (`.pdf`, `.pptx`) –∏/–∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–∫–ª–∞–¥–∞")

col1, col2 = st.columns(2)

with col1:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", type=["pptx", "pdf"])

with col2:
    def load_example_text():
        st.session_state.report_text_input = EXAMPLE_STORYTELLING_TEXT

    if "report_text_input" not in st.session_state:
        st.session_state.report_text_input = ""

    report_text = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–∫–ª–∞–¥–∞",
        height=200,
        placeholder="–í–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è...",
        key="report_text_input"
    )

    st.button("‚úçÔ∏è –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞", on_click=load_example_text, use_container_width=True)

tone = st.selectbox("üé≠ –°—Ç–∏–ª—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", ["–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π", "–§–æ—Ä–º–∞–ª—å–Ω—ã–π", "–ù–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω—ã–π"], index=0)

if st.button("üöÄ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", type="primary", use_container_width=True):
    project_text = ""
    image_descriptions = ""
    
    if uploaded_file is not None:
        with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
            start_time = time.time()
            file_name = uploaded_file.name.lower()
            
            if file_name.endswith('.pptx'):
                images = extract_images_from_pptx(uploaded_file)
                if images:
                    image_descriptions = recognize_images(images)
                project_text = extract_text_from_pptx(uploaded_file)
                
            elif file_name.endswith('.pdf'):
                images = extract_images_from_pdf(uploaded_file)
                if images:
                    image_descriptions = recognize_images(images)
                project_text = extract_text_from_pdf(uploaded_file)
            
            extraction_time = time.time() - start_time
            st.caption(f"‚è±Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ: {extraction_time:.1f} —Å–µ–∫")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    combined_text = "".join(filter(None, [image_descriptions, project_text, report_text]))

    if not combined_text.strip():
        st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
    else:
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –ò–ò... (~45-90 —Å–µ–∫—É–Ω–¥)"):
            start_time = time.time()
            analysis_result = get_analysis_from_deepseek(combined_text, tone)
            analysis_time = time.time() - start_time
            st.caption(f"‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è–ª: {analysis_time:.1f} —Å–µ–∫")
            
            if analysis_result:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
                tabs = st.tabs(["üìä –°–∏–ª—å–Ω—ã–µ/–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", "üîç –§–∞–∫—Ç—á–µ–∫", "üé§ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "‚ùì –í–æ–ø—Ä–æ—Å—ã"])
                
                with tabs[0]:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("**–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**")
                        strengths = analysis_result.get("strengths", [])
                        if isinstance(strengths, list):
                            for strength in strengths:
                                st.success(f"‚úÖ {strength}")
                        else:
                            st.success(f"‚úÖ {strengths}")
                            
                    with col2:
                        st.write("**–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**")
                        weaknesses = analysis_result.get("weaknesses", [])
                        if isinstance(weaknesses, list):
                            for weakness in weaknesses:
                                st.warning(f"‚ö†Ô∏è {weakness}")
                        else:
                            st.warning(f"‚ö†Ô∏è {weaknesses}")
                
                with tabs[1]:
                    st.write("**–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤:**")
                    fact_checks = analysis_result.get("fact_check", [])
                    if isinstance(fact_checks, list):
                        for fact in fact_checks:
                            if isinstance(fact, dict):
                                claim = fact.get('claim', '')
                                verdict = fact.get('verdict', '')
                                explanation = fact.get('explanation', '')
                                with st.expander(f"**{claim}**"):
                                    st.write(f"**–í–µ—Ä–¥–∏–∫—Ç:** {verdict}")
                                    st.write(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {explanation}")
                            else:
                                st.write(f"**–§–∞–∫—Ç:** {fact}")
                    else:
                        st.write(f"**–§–∞–∫—Ç—ã:** {fact_checks}")
                
                with tabs[2]:
                    st.write("**–°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è:**")
                    script = analysis_result.get("storytelling_script", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö script
                    if isinstance(script, str):
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ JSON
                        try:
                            script = json.loads(script)
                        except:
                            st.write(script)
                            script = {}
                    
                    if isinstance(script, dict):
                        sections = [
                            ("üéØ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "introduction"),
                            ("üìù –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å", "main_part"), 
                            ("üèÅ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ", "conclusion")
                        ]
                        for title, key in sections:
                            content = script.get(key, "")
                            if content:
                                with st.expander(title, expanded=len(content) < 300):
                                    st.write(content)
                    else:
                        st.write("–°—Ü–µ–Ω–∞—Ä–∏–π:", script)
                
                with tabs[3]:
                    st.write("**–ö–∞–≤–µ—Ä–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**")
                    questions = analysis_result.get("tricky_questions", [])
                    if isinstance(questions, list):
                        for i, question in enumerate(questions, 1):
                            st.info(f"{i}. {question}")
                    else:
                        st.info(f"–í–æ–ø—Ä–æ—Å—ã: {questions}")
            else:
                st.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
